# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "get_mbr()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_new_asset(uint64,uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_asset(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_algos(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_asset_from_box(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_asset_probability(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_info(uint64)(uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_raffle_price(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "raffle_helper()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "raffle(pay,byte[8])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "raffle2(pay,byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZ2FjaGFfY29udHJhY3QuY29udHJhY3QuR2FjaGFDb250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "assets_count": {
                    "type": "uint64",
                    "key": "assets_count"
                },
                "raffle_price": {
                    "type": "uint64",
                    "key": "raffle_price"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "GachaContract",
        "methods": [
            {
                "name": "get_mbr",
                "args": [],
                "returns": {
                    "type": "uint64",
                    "desc": "MBR required"
                },
                "desc": "Public method to get the increment of the MBR (minimum balance required)\nfor adding a new asset."
            },
            {
                "name": "add_new_asset",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asa_id",
                        "desc": "The id of the ASA"
                    },
                    {
                        "type": "uint64",
                        "name": "asa_prob",
                        "desc": "The probability to get that ASA (between 1 and 1000)"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_pay",
                        "desc": "The payment of MBR"
                    }
                ],
                "returns": {
                    "type": "void",
                    "desc": "MBR required"
                },
                "desc": "Adds a new asset to the Smart Contract"
            },
            {
                "name": "withdraw_asset",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asa_id",
                        "desc": "The id of the ASA"
                    },
                    {
                        "type": "uint64",
                        "name": "asa_amt",
                        "desc": "The amount to withdraw"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw a given amount, from the specified ASA"
            },
            {
                "name": "withdraw_algos",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amt",
                        "desc": "The amount of Algos to withdraw"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw a given amount of Algos from the Smart Contract account"
            },
            {
                "name": "delete_asset_from_box",
                "args": [
                    {
                        "type": "uint64",
                        "name": "box_id"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Delete a given ASA from the box storage"
            },
            {
                "name": "update_asset_probability",
                "args": [
                    {
                        "type": "uint64",
                        "name": "box_id",
                        "desc": "The id of the box where the asset is located"
                    },
                    {
                        "type": "uint64",
                        "name": "asa_prob",
                        "desc": "The NEW probability to set to the ASA (between 1 and 1000)"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Update the probability of an specific asset"
            },
            {
                "name": "get_asset_info",
                "args": [
                    {
                        "type": "uint64",
                        "name": "box_id",
                        "desc": "The id of the Box"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "(UInt64, UInt64): ASA id, ASA probability"
                },
                "desc": "Get the information of an ASA on the boxes list,"
            },
            {
                "name": "update_raffle_price",
                "args": [
                    {
                        "type": "uint64",
                        "name": "price",
                        "desc": "The new price"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Update the price of the raffle"
            },
            {
                "name": "raffle_helper",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Helper function"
            },
            {
                "name": "raffle",
                "args": [
                    {
                        "type": "pay",
                        "name": "pay",
                        "desc": "Payment to draw"
                    },
                    {
                        "type": "byte[8]",
                        "name": "seed",
                        "desc": "seed for the random (8 chars)"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The id of the won ASA"
                },
                "desc": "Triggers the draw"
            },
            {
                "name": "raffle2",
                "args": [
                    {
                        "type": "pay",
                        "name": "pay",
                        "desc": "Payment to draw"
                    },
                    {
                        "type": "byte[]",
                        "name": "seed",
                        "desc": "seed for the random (chars)"
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The id of the won ASA"
                },
                "desc": "Triggers the draw"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "delete_application": "CALL",
        "no_op": "CREATE",
        "update_application": "CALL"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class GetMbrArgs(_ArgsBase[int]):
    """Public method to get the increment of the MBR (minimum balance required)
    for adding a new asset."""

    @staticmethod
    def method() -> str:
        return "get_mbr()uint64"


@dataclasses.dataclass(kw_only=True)
class AddNewAssetArgs(_ArgsBase[None]):
    """Adds a new asset to the Smart Contract"""

    asa_id: int
    """The id of the ASA"""
    asa_prob: int
    """The probability to get that ASA (between 1 and 1000)"""
    mbr_pay: TransactionWithSigner
    """The payment of MBR"""

    @staticmethod
    def method() -> str:
        return "add_new_asset(uint64,uint64,pay)void"


@dataclasses.dataclass(kw_only=True)
class WithdrawAssetArgs(_ArgsBase[None]):
    """Withdraw a given amount, from the specified ASA"""

    asa_id: int
    """The id of the ASA"""
    asa_amt: int
    """The amount to withdraw"""

    @staticmethod
    def method() -> str:
        return "withdraw_asset(uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class WithdrawAlgosArgs(_ArgsBase[None]):
    """Withdraw a given amount of Algos from the Smart Contract account"""

    amt: int
    """The amount of Algos to withdraw"""

    @staticmethod
    def method() -> str:
        return "withdraw_algos(uint64)void"


@dataclasses.dataclass(kw_only=True)
class DeleteAssetFromBoxArgs(_ArgsBase[None]):
    """Delete a given ASA from the box storage"""

    box_id: int

    @staticmethod
    def method() -> str:
        return "delete_asset_from_box(uint64)void"


@dataclasses.dataclass(kw_only=True)
class UpdateAssetProbabilityArgs(_ArgsBase[None]):
    """Update the probability of an specific asset"""

    box_id: int
    """The id of the box where the asset is located"""
    asa_prob: int
    """The NEW probability to set to the ASA (between 1 and 1000)"""

    @staticmethod
    def method() -> str:
        return "update_asset_probability(uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class GetAssetInfoArgs(_ArgsBase[tuple[int, int]]):
    """Get the information of an ASA on the boxes list,"""

    box_id: int
    """The id of the Box"""

    @staticmethod
    def method() -> str:
        return "get_asset_info(uint64)(uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class UpdateRafflePriceArgs(_ArgsBase[None]):
    """Update the price of the raffle"""

    price: int
    """The new price"""

    @staticmethod
    def method() -> str:
        return "update_raffle_price(uint64)void"


@dataclasses.dataclass(kw_only=True)
class RaffleHelperArgs(_ArgsBase[None]):
    """Helper function"""

    @staticmethod
    def method() -> str:
        return "raffle_helper()void"


@dataclasses.dataclass(kw_only=True)
class RaffleArgs(_ArgsBase[int]):
    """Triggers the draw"""

    pay: TransactionWithSigner
    """Payment to draw"""
    seed: bytes | bytearray | tuple[int, int, int, int, int, int, int, int]
    """seed for the random (8 chars)"""

    @staticmethod
    def method() -> str:
        return "raffle(pay,byte[8])uint64"


@dataclasses.dataclass(kw_only=True)
class Raffle2Args(_ArgsBase[int]):
    """Triggers the draw"""

    pay: TransactionWithSigner
    """Payment to draw"""
    seed: bytes | bytearray
    """seed for the random (chars)"""

    @staticmethod
    def method() -> str:
        return "raffle2(pay,byte[])uint64"


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.assets_count = typing.cast(int, data.get(b"assets_count"))
        self.raffle_price = typing.cast(int, data.get(b"raffle_price"))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def get_mbr(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Public method to get the increment of the MBR (minimum balance required)
        for adding a new asset.
        
        Adds a call to `get_mbr()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetMbrArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def add_new_asset(
        self,
        *,
        asa_id: int,
        asa_prob: int,
        mbr_pay: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a new asset to the Smart Contract
        
        Adds a call to `add_new_asset(uint64,uint64,pay)void` ABI method
        
        :param int asa_id: The id of the ASA
        :param int asa_prob: The probability to get that ASA (between 1 and 1000)
        :param TransactionWithSigner mbr_pay: The payment of MBR
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AddNewAssetArgs(
            asa_id=asa_id,
            asa_prob=asa_prob,
            mbr_pay=mbr_pay,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_asset(
        self,
        *,
        asa_id: int,
        asa_amt: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Withdraw a given amount, from the specified ASA
        
        Adds a call to `withdraw_asset(uint64,uint64)void` ABI method
        
        :param int asa_id: The id of the ASA
        :param int asa_amt: The amount to withdraw
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawAssetArgs(
            asa_id=asa_id,
            asa_amt=asa_amt,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw_algos(
        self,
        *,
        amt: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Withdraw a given amount of Algos from the Smart Contract account
        
        Adds a call to `withdraw_algos(uint64)void` ABI method
        
        :param int amt: The amount of Algos to withdraw
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawAlgosArgs(
            amt=amt,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def delete_asset_from_box(
        self,
        *,
        box_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Delete a given ASA from the box storage
        
        Adds a call to `delete_asset_from_box(uint64)void` ABI method
        
        :param int box_id: The `box_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DeleteAssetFromBoxArgs(
            box_id=box_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_asset_probability(
        self,
        *,
        box_id: int,
        asa_prob: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Update the probability of an specific asset
        
        Adds a call to `update_asset_probability(uint64,uint64)void` ABI method
        
        :param int box_id: The id of the box where the asset is located
        :param int asa_prob: The NEW probability to set to the ASA (between 1 and 1000)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UpdateAssetProbabilityArgs(
            box_id=box_id,
            asa_prob=asa_prob,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_asset_info(
        self,
        *,
        box_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Get the information of an ASA on the boxes list,
        
        Adds a call to `get_asset_info(uint64)(uint64,uint64)` ABI method
        
        :param int box_id: The id of the Box
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetAssetInfoArgs(
            box_id=box_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_raffle_price(
        self,
        *,
        price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Update the price of the raffle
        
        Adds a call to `update_raffle_price(uint64)void` ABI method
        
        :param int price: The new price
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UpdateRafflePriceArgs(
            price=price,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def raffle_helper(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Helper function
        
        Adds a call to `raffle_helper()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RaffleHelperArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def raffle(
        self,
        *,
        pay: TransactionWithSigner,
        seed: bytes | bytearray | tuple[int, int, int, int, int, int, int, int],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Triggers the draw
        
        Adds a call to `raffle(pay,byte[8])uint64` ABI method
        
        :param TransactionWithSigner pay: Payment to draw
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int] seed: seed for the random (8 chars)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RaffleArgs(
            pay=pay,
            seed=seed,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def raffle2(
        self,
        *,
        pay: TransactionWithSigner,
        seed: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Triggers the draw
        
        Adds a call to `raffle2(pay,byte[])uint64` ABI method
        
        :param TransactionWithSigner pay: Payment to draw
        :param bytes | bytearray seed: seed for the random (chars)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = Raffle2Args(
            pay=pay,
            seed=seed,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def update_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a calls to the update_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_update(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return self

    def delete_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a calls to the delete_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_delete(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class GachaContractClient:
    """A class for interacting with the GachaContract app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        GachaContractClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def get_mbr(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Public method to get the increment of the MBR (minimum balance required)
        for adding a new asset.
        
        Calls `get_mbr()uint64` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: MBR required"""

        args = GetMbrArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def add_new_asset(
        self,
        *,
        asa_id: int,
        asa_prob: int,
        mbr_pay: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Adds a new asset to the Smart Contract
        
        Calls `add_new_asset(uint64,uint64,pay)void` ABI method
        
        :param int asa_id: The id of the ASA
        :param int asa_prob: The probability to get that ASA (between 1 and 1000)
        :param TransactionWithSigner mbr_pay: The payment of MBR
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: MBR required"""

        args = AddNewAssetArgs(
            asa_id=asa_id,
            asa_prob=asa_prob,
            mbr_pay=mbr_pay,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw_asset(
        self,
        *,
        asa_id: int,
        asa_amt: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Withdraw a given amount, from the specified ASA
        
        Calls `withdraw_asset(uint64,uint64)void` ABI method
        
        :param int asa_id: The id of the ASA
        :param int asa_amt: The amount to withdraw
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = WithdrawAssetArgs(
            asa_id=asa_id,
            asa_amt=asa_amt,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw_algos(
        self,
        *,
        amt: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Withdraw a given amount of Algos from the Smart Contract account
        
        Calls `withdraw_algos(uint64)void` ABI method
        
        :param int amt: The amount of Algos to withdraw
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = WithdrawAlgosArgs(
            amt=amt,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def delete_asset_from_box(
        self,
        *,
        box_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Delete a given ASA from the box storage
        
        Calls `delete_asset_from_box(uint64)void` ABI method
        
        :param int box_id: The `box_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DeleteAssetFromBoxArgs(
            box_id=box_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update_asset_probability(
        self,
        *,
        box_id: int,
        asa_prob: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Update the probability of an specific asset
        
        Calls `update_asset_probability(uint64,uint64)void` ABI method
        
        :param int box_id: The id of the box where the asset is located
        :param int asa_prob: The NEW probability to set to the ASA (between 1 and 1000)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UpdateAssetProbabilityArgs(
            box_id=box_id,
            asa_prob=asa_prob,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_asset_info(
        self,
        *,
        box_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[tuple[int, int]]:
        """Get the information of an ASA on the boxes list,
        
        Calls `get_asset_info(uint64)(uint64,uint64)` ABI method
        
        :param int box_id: The id of the Box
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[tuple[int, int]]: (UInt64, UInt64): ASA id, ASA probability"""

        args = GetAssetInfoArgs(
            box_id=box_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update_raffle_price(
        self,
        *,
        price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Update the price of the raffle
        
        Calls `update_raffle_price(uint64)void` ABI method
        
        :param int price: The new price
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = UpdateRafflePriceArgs(
            price=price,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def raffle_helper(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Helper function
        
        Calls `raffle_helper()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = RaffleHelperArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def raffle(
        self,
        *,
        pay: TransactionWithSigner,
        seed: bytes | bytearray | tuple[int, int, int, int, int, int, int, int],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Triggers the draw
        
        Calls `raffle(pay,byte[8])uint64` ABI method
        
        :param TransactionWithSigner pay: Payment to draw
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int] seed: seed for the random (8 chars)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The id of the won ASA"""

        args = RaffleArgs(
            pay=pay,
            seed=seed,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def raffle2(
        self,
        *,
        pay: TransactionWithSigner,
        seed: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Triggers the draw
        
        Calls `raffle2(pay,byte[])uint64` ABI method
        
        :param TransactionWithSigner pay: Payment to draw
        :param bytes | bytearray seed: seed for the random (chars)
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The id of the won ASA"""

        args = Raffle2Args(
            pay=pay,
            seed=seed,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def update_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the update_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.update(
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return result

    def delete_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the delete_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.delete(
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
