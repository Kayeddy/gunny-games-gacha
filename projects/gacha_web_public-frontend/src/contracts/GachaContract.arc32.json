{
    "hints": {
        "get_mbr()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_new_asset(uint64,uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "remove_asset(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_asset_probability(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_probability(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_id(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_raffle_price(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "raffle_helper()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "raffle(pay,byte[8])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "raffle2(pay,byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "random(byte[8])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "random2(byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZ2FjaGFfY29udHJhY3QuY29udHJhY3QuR2FjaGFDb250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "assets_count": {
                    "type": "uint64",
                    "key": "assets_count"
                },
                "raffle_price": {
                    "type": "uint64",
                    "key": "raffle_price"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "GachaContract",
        "methods": [
            {
                "name": "get_mbr",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "add_new_asset",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asa_id"
                    },
                    {
                        "type": "uint64",
                        "name": "asa_prob"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "remove_asset",
                "args": [
                    {
                        "type": "uint64",
                        "name": "id"
                    },
                    {
                        "type": "uint64",
                        "name": "asa_amt"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_asset_probability",
                "args": [
                    {
                        "type": "uint64",
                        "name": "_id"
                    },
                    {
                        "type": "uint64",
                        "name": "asa_prob"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_asset_probability",
                "args": [
                    {
                        "type": "uint64",
                        "name": "_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_asset_id",
                "args": [
                    {
                        "type": "uint64",
                        "name": "_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "update_raffle_price",
                "args": [
                    {
                        "type": "uint64",
                        "name": "price"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "raffle_helper",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "raffle",
                "args": [
                    {
                        "type": "pay",
                        "name": "pay"
                    },
                    {
                        "type": "byte[8]",
                        "name": "seed"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "raffle2",
                "args": [
                    {
                        "type": "pay",
                        "name": "pay"
                    },
                    {
                        "type": "byte[]",
                        "name": "seed"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "random",
                "args": [
                    {
                        "type": "byte[8]",
                        "name": "seed"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "random2",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "seed"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE",
        "update_application": "CALL",
        "delete_application": "CALL"
    }
}