/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "get_mbr()uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "add_new_asset(uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw_asset(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw_algos(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delete_asset_from_box(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_asset_probability(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_asset_info(uint64)(uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_raffle_price(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "raffle_helper()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "raffle(pay,byte[8])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "raffle2(pay,byte[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZ2FjaGFfY29udHJhY3QuY29udHJhY3QuR2FjaGFDb250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgaW50IDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "assets_count": {
          "type": "uint64",
          "key": "assets_count"
        },
        "raffle_price": {
          "type": "uint64",
          "key": "raffle_price"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "GachaContract",
    "methods": [
      {
        "name": "get_mbr",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "uint64",
          "desc": "MBR required"
        },
        "desc": "Public method to get the increment of the MBR (minimum balance required)\nfor adding a new asset."
      },
      {
        "name": "add_new_asset",
        "args": [
          {
            "type": "uint64",
            "name": "asa_id",
            "desc": "The id of the ASA"
          },
          {
            "type": "uint64",
            "name": "asa_prob",
            "desc": "The probability to get that ASA (between 1 and 1000)"
          },
          {
            "type": "pay",
            "name": "mbr_pay",
            "desc": "The payment of MBR"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void",
          "desc": "MBR required"
        },
        "desc": "Adds a new asset to the Smart Contract"
      },
      {
        "name": "withdraw_asset",
        "args": [
          {
            "type": "uint64",
            "name": "asa_id",
            "desc": "The id of the ASA"
          },
          {
            "type": "uint64",
            "name": "asa_amt",
            "desc": "The amount to withdraw"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Withdraw a given amount, from the specified ASA"
      },
      {
        "name": "withdraw_algos",
        "args": [
          {
            "type": "uint64",
            "name": "amt",
            "desc": "The amount of Algos to withdraw"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Withdraw a given amount of Algos from the Smart Contract account"
      },
      {
        "name": "delete_asset_from_box",
        "args": [
          {
            "type": "uint64",
            "name": "box_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Delete a given ASA from the box storage"
      },
      {
        "name": "update_asset_probability",
        "args": [
          {
            "type": "uint64",
            "name": "box_id",
            "desc": "The id of the box where the asset is located"
          },
          {
            "type": "uint64",
            "name": "asa_prob",
            "desc": "The NEW probability to set to the ASA (between 1 and 1000)"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Update the probability of an specific asset"
      },
      {
        "name": "get_asset_info",
        "args": [
          {
            "type": "uint64",
            "name": "box_id",
            "desc": "The id of the Box"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(uint64,uint64)",
          "desc": "(UInt64, UInt64): ASA id, ASA probability"
        },
        "desc": "Get the information of an ASA on the boxes list,"
      },
      {
        "name": "update_raffle_price",
        "args": [
          {
            "type": "uint64",
            "name": "price",
            "desc": "The new price"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Update the price of the raffle"
      },
      {
        "name": "raffle_helper",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Helper function"
      },
      {
        "name": "raffle",
        "args": [
          {
            "type": "pay",
            "name": "pay",
            "desc": "Payment to draw"
          },
          {
            "type": "byte[8]",
            "name": "seed",
            "desc": "seed for the random (8 chars)"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64",
          "desc": "The id of the won ASA"
        },
        "desc": "Triggers the draw"
      },
      {
        "name": "raffle2",
        "args": [
          {
            "type": "pay",
            "name": "pay",
            "desc": "Payment to draw"
          },
          {
            "type": "byte[]",
            "name": "seed",
            "desc": "seed for the random (chars)"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64",
          "desc": "The id of the won ASA"
        },
        "desc": "Triggers the draw"
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "update_application": "CALL",
    "delete_application": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the GachaContract smart contract.
 */
export type GachaContract = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'get_mbr()uint64' | 'get_mbr', {
      argsObj: {
      }
      argsTuple: []
      /**
       * MBR required
       */
      returns: bigint
    }>
    & Record<'add_new_asset(uint64,uint64,pay)void' | 'add_new_asset', {
      argsObj: {
        /**
         * The id of the ASA
         */
        asaId: bigint | number
        /**
         * The probability to get that ASA (between 1 and 1000)
         */
        asaProb: bigint | number
        /**
         * The payment of MBR
         */
        mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [asaId: bigint | number, asaProb: bigint | number, mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      /**
       * MBR required
       */
      returns: void
    }>
    & Record<'withdraw_asset(uint64,uint64)void' | 'withdraw_asset', {
      argsObj: {
        /**
         * The id of the ASA
         */
        asaId: bigint | number
        /**
         * The amount to withdraw
         */
        asaAmt: bigint | number
      }
      argsTuple: [asaId: bigint | number, asaAmt: bigint | number]
      returns: void
    }>
    & Record<'withdraw_algos(uint64)void' | 'withdraw_algos', {
      argsObj: {
        /**
         * The amount of Algos to withdraw
         */
        amt: bigint | number
      }
      argsTuple: [amt: bigint | number]
      returns: void
    }>
    & Record<'delete_asset_from_box(uint64)void' | 'delete_asset_from_box', {
      argsObj: {
        boxId: bigint | number
      }
      argsTuple: [boxId: bigint | number]
      returns: void
    }>
    & Record<'update_asset_probability(uint64,uint64)void' | 'update_asset_probability', {
      argsObj: {
        /**
         * The id of the box where the asset is located
         */
        boxId: bigint | number
        /**
         * The NEW probability to set to the ASA (between 1 and 1000)
         */
        asaProb: bigint | number
      }
      argsTuple: [boxId: bigint | number, asaProb: bigint | number]
      returns: void
    }>
    & Record<'get_asset_info(uint64)(uint64,uint64)' | 'get_asset_info', {
      argsObj: {
        /**
         * The id of the Box
         */
        boxId: bigint | number
      }
      argsTuple: [boxId: bigint | number]
      /**
       * (UInt64, UInt64): ASA id, ASA probability
       */
      returns: [bigint, bigint]
    }>
    & Record<'update_raffle_price(uint64)void' | 'update_raffle_price', {
      argsObj: {
        /**
         * The new price
         */
        price: bigint | number
      }
      argsTuple: [price: bigint | number]
      returns: void
    }>
    & Record<'raffle_helper()void' | 'raffle_helper', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'raffle(pay,byte[8])uint64' | 'raffle', {
      argsObj: {
        /**
         * Payment to draw
         */
        pay: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * seed for the random (8 chars)
         */
        seed: Uint8Array
      }
      argsTuple: [pay: TransactionToSign | Transaction | Promise<SendTransactionResult>, seed: Uint8Array]
      /**
       * The id of the won ASA
       */
      returns: bigint
    }>
    & Record<'raffle2(pay,byte[])uint64' | 'raffle2', {
      argsObj: {
        /**
         * Payment to draw
         */
        pay: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * seed for the random (chars)
         */
        seed: Uint8Array
      }
      argsTuple: [pay: TransactionToSign | Transaction | Promise<SendTransactionResult>, seed: Uint8Array]
      /**
       * The id of the won ASA
       */
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      assetsCount?: IntegerState
      rafflePrice?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type GachaContractSig = keyof GachaContract['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends GachaContractSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the GachaContract smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends GachaContractSig> = GachaContract['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the GachaContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GachaContractSig> = GachaContract['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type GachaContractCreateCalls = (typeof GachaContractCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type GachaContractCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type GachaContractUpdateCalls = (typeof GachaContractCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type GachaContractUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type GachaContractDeleteCalls = (typeof GachaContractCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type GachaContractDeleteCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type GachaContractDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: GachaContractCreateCalls) => GachaContractCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: GachaContractUpdateCalls) => GachaContractUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: GachaContractDeleteCalls) => GachaContractDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class GachaContractCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the GachaContract smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the GachaContract smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the GachaContract smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the get_mbr()uint64 ABI method
   *
   * Public method to get the increment of the MBR (minimum balance required)
for adding a new asset.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getMbr(args: MethodArgs<'get_mbr()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_mbr()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the add_new_asset(uint64,uint64,pay)void ABI method
   *
   * Adds a new asset to the Smart Contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addNewAsset(args: MethodArgs<'add_new_asset(uint64,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'add_new_asset(uint64,uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asaId, args.asaProb, args.mbrPay],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw_asset(uint64,uint64)void ABI method
   *
   * Withdraw a given amount, from the specified ASA
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawAsset(args: MethodArgs<'withdraw_asset(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw_asset(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asaId, args.asaAmt],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw_algos(uint64)void ABI method
   *
   * Withdraw a given amount of Algos from the Smart Contract account
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawAlgos(args: MethodArgs<'withdraw_algos(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw_algos(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amt],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the delete_asset_from_box(uint64)void ABI method
   *
   * Delete a given ASA from the box storage
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteAssetFromBox(args: MethodArgs<'delete_asset_from_box(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'delete_asset_from_box(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_asset_probability(uint64,uint64)void ABI method
   *
   * Update the probability of an specific asset
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateAssetProbability(args: MethodArgs<'update_asset_probability(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_asset_probability(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxId, args.asaProb],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_asset_info(uint64)(uint64,uint64) ABI method
   *
   * Get the information of an ASA on the boxes list,
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAssetInfo(args: MethodArgs<'get_asset_info(uint64)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_asset_info(uint64)(uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_raffle_price(uint64)void ABI method
   *
   * Update the price of the raffle
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateRafflePrice(args: MethodArgs<'update_raffle_price(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_raffle_price(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.price],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the raffle_helper()void ABI method
   *
   * Helper function
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static raffleHelper(args: MethodArgs<'raffle_helper()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'raffle_helper()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the raffle(pay,byte[8])uint64 ABI method
   *
   * Triggers the draw
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static raffle(args: MethodArgs<'raffle(pay,byte[8])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'raffle(pay,byte[8])uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.pay, args.seed],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the raffle2(pay,byte[])uint64 ABI method
   *
   * Triggers the draw
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static raffle2(args: MethodArgs<'raffle2(pay,byte[])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'raffle2(pay,byte[])uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.pay, args.seed],
      ...params,
    }
  }
}

/**
 * A client to make calls to the GachaContract smart contract
 */
export class GachaContractClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `GachaContractClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof GachaContract['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the GachaContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: GachaContractDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(GachaContractCallFactory.create)
    const updateArgs = params.updateCall?.(GachaContractCallFactory.update)
    const deleteArgs = params.deleteCall?.(GachaContractCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the GachaContract smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the GachaContract smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the GachaContract smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.delete(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the GachaContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the get_mbr()uint64 ABI method.
   *
   * Public method to get the increment of the MBR (minimum balance required)
for adding a new asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: MBR required
   */
  public getMbr(args: MethodArgs<'get_mbr()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GachaContractCallFactory.getMbr(args, params))
  }

  /**
   * Calls the add_new_asset(uint64,uint64,pay)void ABI method.
   *
   * Adds a new asset to the Smart Contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: MBR required
   */
  public addNewAsset(args: MethodArgs<'add_new_asset(uint64,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GachaContractCallFactory.addNewAsset(args, params))
  }

  /**
   * Calls the withdraw_asset(uint64,uint64)void ABI method.
   *
   * Withdraw a given amount, from the specified ASA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawAsset(args: MethodArgs<'withdraw_asset(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GachaContractCallFactory.withdrawAsset(args, params))
  }

  /**
   * Calls the withdraw_algos(uint64)void ABI method.
   *
   * Withdraw a given amount of Algos from the Smart Contract account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawAlgos(args: MethodArgs<'withdraw_algos(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GachaContractCallFactory.withdrawAlgos(args, params))
  }

  /**
   * Calls the delete_asset_from_box(uint64)void ABI method.
   *
   * Delete a given ASA from the box storage
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteAssetFromBox(args: MethodArgs<'delete_asset_from_box(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GachaContractCallFactory.deleteAssetFromBox(args, params))
  }

  /**
   * Calls the update_asset_probability(uint64,uint64)void ABI method.
   *
   * Update the probability of an specific asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateAssetProbability(args: MethodArgs<'update_asset_probability(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GachaContractCallFactory.updateAssetProbability(args, params))
  }

  /**
   * Calls the get_asset_info(uint64)(uint64,uint64) ABI method.
   *
   * Get the information of an ASA on the boxes list,
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: (UInt64, UInt64): ASA id, ASA probability
   */
  public getAssetInfo(args: MethodArgs<'get_asset_info(uint64)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GachaContractCallFactory.getAssetInfo(args, params))
  }

  /**
   * Calls the update_raffle_price(uint64)void ABI method.
   *
   * Update the price of the raffle
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateRafflePrice(args: MethodArgs<'update_raffle_price(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GachaContractCallFactory.updateRafflePrice(args, params))
  }

  /**
   * Calls the raffle_helper()void ABI method.
   *
   * Helper function
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public raffleHelper(args: MethodArgs<'raffle_helper()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GachaContractCallFactory.raffleHelper(args, params))
  }

  /**
   * Calls the raffle(pay,byte[8])uint64 ABI method.
   *
   * Triggers the draw
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The id of the won ASA
   */
  public raffle(args: MethodArgs<'raffle(pay,byte[8])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GachaContractCallFactory.raffle(args, params))
  }

  /**
   * Calls the raffle2(pay,byte[])uint64 ABI method.
   *
   * Triggers the draw
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The id of the won ASA
   */
  public raffle2(args: MethodArgs<'raffle2(pay,byte[])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GachaContractCallFactory.raffle2(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<GachaContract['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get assetsCount() {
        return GachaContractClient.getIntegerState(state, 'assets_count')
      },
      get rafflePrice() {
        return GachaContractClient.getIntegerState(state, 'raffle_price')
      },
    }
  }

  public compose(): GachaContractComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getMbr(args: MethodArgs<'get_mbr()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getMbr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addNewAsset(args: MethodArgs<'add_new_asset(uint64,uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addNewAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawAsset(args: MethodArgs<'withdraw_asset(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawAlgos(args: MethodArgs<'withdraw_algos(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawAlgos(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteAssetFromBox(args: MethodArgs<'delete_asset_from_box(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteAssetFromBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateAssetProbability(args: MethodArgs<'update_asset_probability(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateAssetProbability(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAssetInfo(args: MethodArgs<'get_asset_info(uint64)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAssetInfo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateRafflePrice(args: MethodArgs<'update_raffle_price(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateRafflePrice(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      raffleHelper(args: MethodArgs<'raffle_helper()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.raffleHelper(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      raffle(args: MethodArgs<'raffle(pay,byte[8])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.raffle(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      raffle2(args: MethodArgs<'raffle2(pay,byte[])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.raffle2(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as GachaContractComposer
  }
}
export type GachaContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_mbr()uint64 ABI method.
   *
   * Public method to get the increment of the MBR (minimum balance required)
for adding a new asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMbr(args: MethodArgs<'get_mbr()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, MethodReturn<'get_mbr()uint64'>]>

  /**
   * Calls the add_new_asset(uint64,uint64,pay)void ABI method.
   *
   * Adds a new asset to the Smart Contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addNewAsset(args: MethodArgs<'add_new_asset(uint64,uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, MethodReturn<'add_new_asset(uint64,uint64,pay)void'>]>

  /**
   * Calls the withdraw_asset(uint64,uint64)void ABI method.
   *
   * Withdraw a given amount, from the specified ASA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAsset(args: MethodArgs<'withdraw_asset(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, MethodReturn<'withdraw_asset(uint64,uint64)void'>]>

  /**
   * Calls the withdraw_algos(uint64)void ABI method.
   *
   * Withdraw a given amount of Algos from the Smart Contract account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAlgos(args: MethodArgs<'withdraw_algos(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, MethodReturn<'withdraw_algos(uint64)void'>]>

  /**
   * Calls the delete_asset_from_box(uint64)void ABI method.
   *
   * Delete a given ASA from the box storage
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteAssetFromBox(args: MethodArgs<'delete_asset_from_box(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, MethodReturn<'delete_asset_from_box(uint64)void'>]>

  /**
   * Calls the update_asset_probability(uint64,uint64)void ABI method.
   *
   * Update the probability of an specific asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAssetProbability(args: MethodArgs<'update_asset_probability(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, MethodReturn<'update_asset_probability(uint64,uint64)void'>]>

  /**
   * Calls the get_asset_info(uint64)(uint64,uint64) ABI method.
   *
   * Get the information of an ASA on the boxes list,
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetInfo(args: MethodArgs<'get_asset_info(uint64)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, MethodReturn<'get_asset_info(uint64)(uint64,uint64)'>]>

  /**
   * Calls the update_raffle_price(uint64)void ABI method.
   *
   * Update the price of the raffle
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateRafflePrice(args: MethodArgs<'update_raffle_price(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, MethodReturn<'update_raffle_price(uint64)void'>]>

  /**
   * Calls the raffle_helper()void ABI method.
   *
   * Helper function
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  raffleHelper(args: MethodArgs<'raffle_helper()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, MethodReturn<'raffle_helper()void'>]>

  /**
   * Calls the raffle(pay,byte[8])uint64 ABI method.
   *
   * Triggers the draw
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  raffle(args: MethodArgs<'raffle(pay,byte[8])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, MethodReturn<'raffle(pay,byte[8])uint64'>]>

  /**
   * Calls the raffle2(pay,byte[])uint64 ABI method.
   *
   * Triggers the draw
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  raffle2(args: MethodArgs<'raffle2(pay,byte[])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, MethodReturn<'raffle2(pay,byte[])uint64'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the GachaContract smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the GachaContract smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the GachaContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): GachaContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): GachaContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<GachaContractComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<GachaContractComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type GachaContractComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type GachaContractComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
